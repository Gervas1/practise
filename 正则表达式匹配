难度系数：🚩🚩🚩
🚀 题目
给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。
'.' 匹配任意单个字符
'*' 匹配零个或多个前面的那一个元素
所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。

 
示例 1：
输入：s = "aa", p = "a"
输出：false
解释："a" 无法匹配 "aa" 整个字符串。

示例 2:
输入：s = "aa", p = "a*"
输出：true
解释：因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。
因此，字符串 "aa" 可被视为 'a' 重复了一次。


示例 3：
输入：s = "ab", p = ".*"
输出：true
解释：".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。
 

提示：

1 <= s.length <= 20
1 <= p.length <= 30
s 只包含从 a-z 的小写字母。
p 只包含从 a-z 的小写字母，以及字符 . 和 *。
保证每次出现字符 * 时，前面都匹配到有效的字符

🚀 答案

本次使用了动态规划的方法

class Solution {
    public boolean isMatch(String s, String p) {
        int sl = s.length();
        int pl = p.length();
        if(sl != 0 && pl == 0){
            return false;
        }
        //dp[i][j]：s[i...]和p[j...]（从0开始）是否匹配
        boolean[][] dp = new boolean[sl+1][pl+1];
        //base case
        dp[sl][pl] = true;//两个空字符串肯定是匹配的
        //s是空时，p可能也可以匹配空字符串
        for(int i = pl-1; i >= 0; i--){
            if(p.charAt(i) == '*'){
                dp[sl][i] = dp[sl][i + 1];
            }else{
                if(i+1 < pl && p.charAt(i + 1) == '*'){
                    dp[sl][i] = dp[sl][i+1];
                }
            }   
        }

        for(int i = sl-1; i >= 0; i--){
            for(int j = pl-1; j >= 0; j--){
                //1.若p[j]是*
                if(p.charAt(j) == '*'){
                    //1.1若p[j-1]=s[i]或. ，那这个*可能把p[j-1]多匹配几个来，也可能匹配成0个
                    if(p.charAt(j-1) == s.charAt(i) || p.charAt(j-1) == '.'){
                        dp[i][j] = dp[i+1][j] || dp[i][j+1];
                    }else{//1.2 若p[j-1]啥也不是，那*只能把p[j-1]匹配为0个，然后看后面了
                        dp[i][j] = dp[i][j+1];
                    }
                }//2.若p[j]=s[i]或者.
                else if(p.charAt(j) == '.' || p.charAt(j) == s.charAt(i)){
                    if(j+1 < pl && p.charAt(j+1) == '*'){
                    //2.1 p[j+1]为*,又有匹配成0个或多个的情况
                        dp[i][j] = dp[i+1][j] || dp[i][j+1];
                    }else{//2.2 p[j+1]不是*，那就直接都加1了
                        dp[i][j] = dp[i+1][j+1];
                    }
                }//3. 若p[j]既不是*也不是.和s[i]，但是p[j+1]是*，还能做最后的挣扎
                else if(j+1 < pl && p.charAt(j+1) == '*'){
                        dp[i][j] = dp[i][j+1];
                }
            }
        }
        return dp[0][0];
    }
}
