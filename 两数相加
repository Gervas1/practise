🚀 题目

给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。
请你将两个数相加，并以相同形式返回一个表示和的链表。

你可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例 1：
输入：l1 = [2,4,3], l2 = [5,6,4]
输出：[7,0,8]
解释：342 + 465 = 807.

示例 2：
输入：l1 = [0], l2 = [0]
输出：[0]

提示：

每个链表中的节点数在范围 [1, 100] 内
0 <= Node.val <= 9
题目数据保证列表表示的数字不含前导零

🚀 答案
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        //结果链表虚拟头结点
        ListNode dummyNode = new ListNode(-1);
        //结果链表工作指针
        ListNode cur = dummyNode;
        //定义进位
        int carry = 0;
        //模拟两数相加
        while(l1 != null || l2 != null){
            //本题难点：如果l1为空，l2不为空，则将l1的空对应值置为0，否则置为l1.val。l2亦然。
            //此处需要画图理解。
            int x = (l1 == null) ? 0 : l1.val;
            int y = (l2 == null) ? 0 : l2.val;
            //两数原始和（0-18）
            int sum = x + y + carry;
            //进位
            carry = sum / 10;
            //两数和（0-9）
            sum = sum % 10;
            //sum = sum / 10; 这里第一次搞错了，记录。
            //新建链表结点，将val赋值为sum
            cur.next = new ListNode(sum);
            //指针后移到新结点上
            cur = cur.next;
            //两个工作指针后移
            if(l1 != null) l1 = l1.next;
            if(l2 != null) l2 = l2.next;
        }
        //难点：最后的进位是特殊情况，需要增加新结点并赋val值为1
        if(carry == 1){
            cur.next = new ListNode(1);
        }
        //返回结果链表的头结点
        return dummyNode.next;
    }
}
